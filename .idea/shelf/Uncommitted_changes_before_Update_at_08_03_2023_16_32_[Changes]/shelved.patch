Index: conversionHexToAssembly.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport math\r\nfrom time import sleep\r\nfrom PyQt5 import QtCore\r\nfrom PyQt5.QtCore import pyqtSignal\r\nfrom SecondaryWindows import resource_path\r\n\r\nCurrentInstruction = 0\r\nTotalInstructions = 1\r\n\r\n\r\n# Thread qui met à jour la valeur de la barre de progression\r\nclass ProgressThread(QtCore.QThread):\r\n    progress_signal = pyqtSignal(int)\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n\r\n    def run(self):\r\n        while 1:\r\n            self.progress_signal.emit(int(CurrentInstruction / TotalInstructions * 100))\r\n            sleep(0.1)\r\n\r\n\r\n# Fonction qui lit le fichier d'entrée et écrit chaque instruction en binaire\r\ndef writeBinaryInstructions(filepath):\r\n    global TotalInstructions\r\n    global CurrentInstruction\r\n    CurrentInstruction = 0\r\n    TotalInstructions = 1\r\n    STMfile = open(filepath)\r\n    STMfileLines = STMfile.readlines()\r\n    data_STMfile = \"\"\r\n    addresses = []\r\n    for STMfileLine in STMfileLines:\r\n        data_STMfile += STMfileLine[12:-3]\r\n        addresses.append(STMfileLine[4:12])\r\n    data_binary = \"\"\r\n    # Boucle qui convertit l'hexadécimal au binaire\r\n    for c in data_STMfile:\r\n        data_binary += str(bin(int(c, 16))[2:].zfill(4))\r\n    data_big_endian = \"\"\r\n    # Boucle qui convertit les données de Little Endian en Big Endian\r\n    for i in range(0, len(data_binary) - 15, 8):\r\n        data_big_endian = data_big_endian + data_binary[i:i + 8]\r\n    i = 0\r\n    data_reformatted = \"\"\r\n    # Boucle qui reformatte les données par groupe de 32 bits\r\n    while i < len(data_big_endian) - 31:\r\n        tmp = data_big_endian[i:i + 32]\r\n        data_reformatted += tmp[24:] + tmp[16:24] + tmp[8:16] + tmp[:8]\r\n        i += 32\r\n    instructions_file = open(resource_path(\"ConversionFiles\\\\instructions_file.txt\"), \"w\")\r\n    i = 0\r\n    # Boucle qui écrit le fichier de sortie avec chaque instruction\r\n    while i < len(data_reformatted) - 31:\r\n        tmp = data_reformatted[i:i + 32]\r\n        if tmp[0:3] == \"111\" and tmp[3:5] != \"00\":\r\n            instructions_file.write(addresses[math.floor(i / 256)] + tmp + '\\n')\r\n            i += 32\r\n        else:\r\n            instructions_file.write(addresses[min(round(i / 256), len(addresses) - 1)] + tmp[:16] + '\\n')\r\n            i += 16\r\n\r\n\r\n# Fonction qui détermine si une instruction est 16 bits ou 32 bits\r\ndef is32bits(instruction):\r\n    if instruction[0:3] == '111' and instruction[3:5] != \"00\":\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Fonction qui lit le JSON et retourne les arguments d'une instruction avec leurs valeurs\r\ndef GetDictField_16(json_file, line, index):\r\n    finalString = \"\"\r\n    try:\r\n        fields = json_file[str(line[:index])]['fields']\r\n    except:\r\n        return \"\"\r\n    keys = fields.keys()\r\n    newBit = dict()\r\n    for i in range(len(fields)):\r\n        tmp = fields[list(keys)[i]]\r\n        var1 = 15 - int(tmp[0])\r\n        var2 = 15 - int(tmp[1])\r\n        if var1 > var2:\r\n            newTab = [var1, var2]\r\n        else:\r\n            newTab = [var2, var1]\r\n        newBit[list(fields.keys())[i]] = newTab\r\n    newDict = dict()\r\n    for i in range(len(newBit)):\r\n        tmp = newBit[list(keys)[i]]\r\n        newDict[list(newBit.keys())[i]] = int(line[tmp[1]:tmp[0] + 1], 2)\r\n    for j in range(len(newDict) - 1):\r\n        key = list(keys)[j]\r\n        if key[0] == 'R':\r\n            match key[1]:\r\n                case \"n\":\r\n                    finalString += 'Rn' + str(newDict[list(keys)[j]]) + ', '\r\n                case \"m\":\r\n                    finalString += 'Rm' + str(newDict[list(keys)[j]]) + ', '\r\n                case \"d\":\r\n                    finalString += 'Rd' + str(newDict[list(keys)[j]]) + ', '\r\n                case \"t\":\r\n                    finalString += 'Rt' + str(newDict[list(keys)[j]]) + ', '\r\n        if key[:3] == 'imm':\r\n            finalString += '#' + str(newDict[list(keys)[j]]) + ', '\r\n    key = list(keys)[-1]\r\n    if key[0] == 'R':\r\n        match key[1]:\r\n            case \"n\":\r\n                finalString += 'Rn' + str(newDict[list(keys)[-1]])\r\n            case \"m\":\r\n                finalString += 'Rm' + str(newDict[list(keys)[-1]])\r\n            case \"d\":\r\n                finalString += 'Rd' + str(newDict[list(keys)[-1]])\r\n            case \"t\":\r\n                finalString += 'Rt' + str(newDict[list(keys)[-1]])\r\n    if key[:3] == 'imm':\r\n        finalString += '#' + str(newDict[list(keys)[-1]])\r\n    return finalString\r\n\r\n\r\n# Fonction qui écrit les instructions détaillées dans un fichier de sortie\r\ndef write_described_instruction_16(descr_file, json_file, line, index, code, address):\r\n    match code:\r\n        case \"Compact\":\r\n            descr_file.write(\"0x\" + str(hex(int(address, 16)))[2:].zfill(8) + \" : \" + json_file[str(line[:index])][\r\n                'instruction'] + ' : ' + GetDictField_16(json_file, line, index) + \"\\n\")\r\n        case \"Classique\":\r\n            descr_file.write(\"0x\" + str(hex(int(address, 16)))[2:].zfill(8) + \" : \" + json_file[str(line[:index])][\r\n                'meaning'] + ' : ' + GetDictField_16(json_file, line, index) + \"\\n\")\r\n        case \"Classic\":\r\n            descr_file.write(\"0x\" + str(hex(int(address, 16)))[2:].zfill(8) + \" : \" + json_file[str(line[:index])][\r\n                'meaning'] + ' : ' + GetDictField_16(json_file, line, index) + \"\\n\")\r\n        case \"Integral\":\r\n            descr_file.write(\r\n                \"0x\" + str(hex(int(address, 16)))[2:].zfill(8) + \" : \" + line[:-1] + ' : ' +\r\n                json_file[str(line[:index])][\r\n                    'meaning'] + \" : \" + GetDictField_16(json_file, line, index) + \"\\n\")\r\n\r\n\r\n# Fonction qui lit le JSON et retourne les arguments d'une instruction avec leurs valeurs\r\ndef GetDictField_32(json_file, line, instruction):\r\n    finalString = \"\"\r\n    fields = json_file[str(instruction)]['fields']\r\n    keys = fields.keys()\r\n    newBit = dict()\r\n    for i in range(len(fields)):\r\n        tmp = fields[list(keys)[i]]\r\n        var1 = 31 - int(tmp[0])\r\n        var2 = 31 - int(tmp[1])\r\n        if var1 > var2:\r\n            newTab = [var1, var2]\r\n        else:\r\n            newTab = [var2, var1]\r\n        newBit[list(fields.keys())[i]] = newTab\r\n    newDict = dict()\r\n    for i in range(len(newBit)):\r\n        tmp = newBit[list(keys)[i]]\r\n        newDict[list(newBit.keys())[i]] = int(line[tmp[1]:tmp[0] + 1], 2)\r\n    for j in (range(len(newDict) - 1, 0, -1)):\r\n        key = list(keys)[j]\r\n        if key[0] == 'R':\r\n            match key[1]:\r\n                case \"n\":\r\n                    finalString += 'Rn' + str(newDict[list(keys)[j]]) + ', '\r\n                case \"m\":\r\n                    finalString += 'Rm' + str(newDict[list(keys)[j]]) + ', '\r\n                case \"d\":\r\n                    finalString += 'Rd' + str(newDict[list(keys)[j]]) + ', '\r\n                case \"t\":\r\n                    finalString += 'Rt' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[0] == 'W':\r\n            finalString += 'W' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[0] == 'T':\r\n            finalString += 'T' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[0] == 'U':\r\n            finalString += 'U' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:2] == 'tb':\r\n            finalString += 'tb' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:3] == 'imm':\r\n            finalString += '#' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:3] == 'Rt2':\r\n            finalString += 'Rt2 ' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:4] == 'type':\r\n            finalString += 'type:' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:4] == 'SYSm':\r\n            finalString += 'SYSm:' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:4] == 'mask':\r\n            finalString += 'mask:' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:4] == 'cond':\r\n            finalString += 'cond:' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:4] == 'RdLo':\r\n            finalString += 'RdLo:' + str(newDict[list(keys)[j]])\r\n        elif key[:4] == 'RdHi':\r\n            finalString += 'RdHi:' + str(newDict[list(keys)[j]])\r\n        elif key[:6] == 'option':\r\n            finalString += 'option:' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:6] == 'rotate':\r\n            finalString += 'rotate:' + str(newDict[list(keys)[j]]) + ', '\r\n        elif key[:13] == 'register_list':\r\n            finalString += 'register_list:' + str(newDict[list(keys)[j]]) + ', '\r\n    key = list(keys)[-1]\r\n    if key[0] == 'R':\r\n        match key[1]:\r\n            case \"n\":\r\n                finalString += 'Rn' + str(newDict[list(keys)[-1]])\r\n            case \"m\":\r\n                finalString += 'Rm' + str(newDict[list(keys)[-1]])\r\n            case \"d\":\r\n                finalString += 'Rd' + str(newDict[list(keys)[-1]])\r\n            case \"t\":\r\n                finalString += 'Rt' + str(newDict[list(keys)[-1]])\r\n    elif key[0] == 'W':\r\n        finalString += 'W' + str(newDict[list(keys)[-1]])\r\n    elif key[0] == 'T':\r\n        finalString += 'T' + str(newDict[list(keys)[-1]])\r\n    elif key[0] == 'P':\r\n        finalString += 'P' + str(newDict[list(keys)[-1]])\r\n    elif key[0] == 'M':\r\n        finalString += 'M' + str(newDict[list(keys)[-1]])\r\n    elif key[0] == 'U':\r\n        finalString += 'U' + str(newDict[list(keys)[-1]]) + ', '\r\n    elif key[:2] == 'tb':\r\n        finalString += 'tb' + str(newDict[list(keys)[-1]])\r\n    elif key[:3] == 'imm':\r\n        finalString += '#' + str(newDict[list(keys)[-1]])\r\n    elif key[:3] == 'Rt2':\r\n        finalString += 'Rt2 ' + str(newDict[list(keys)[-1]]) + ', '\r\n    elif key[:4] == 'type':\r\n        finalString += 'type:' + str(newDict[list(keys)[-1]])\r\n    elif key[:4] == 'SYSm':\r\n        finalString += 'SYSm:' + str(newDict[list(keys)[-1]])\r\n    elif key[:4] == 'mask':\r\n        finalString += 'mask:' + str(newDict[list(keys)[-1]])\r\n    elif key[:4] == 'cond':\r\n        finalString += 'cond:' + str(newDict[list(keys)[-1]])\r\n    elif key[:4] == 'RdLo':\r\n        finalString += 'RdLo:' + str(newDict[list(keys)[-1]])\r\n    elif key[:4] == 'RdHi':\r\n        finalString += 'RdHi:' + str(newDict[list(keys)[-1]])\r\n    elif key[:6] == 'option':\r\n        finalString += 'option:' + str(newDict[list(keys)[-1]])\r\n    elif key[:6] == 'rotate':\r\n        finalString += 'rotate:' + str(newDict[list(keys)[-1]])\r\n    elif key[:13] == 'register_list':\r\n        finalString += 'register_list:' + str(newDict[list(keys)[-1]])\r\n    return finalString\r\n\r\n\r\n# Fonction qui écrit les instructions détaillées dans un fichier de sortie\r\ndef write_described_instruction_32(descr_file, json_file, line, instruction, code, address):\r\n    match code:\r\n        case \"Compact\":\r\n            descr_file.write(\"0x\" + str(hex(int(address, 16)))[2:].zfill(8) + \" : \" + json_file[str(instruction)]['instruction'] + ' : ' + GetDictField_32(json_file, line, instruction) + \"\\n\")\r\n        case \"Classique\":\r\n            descr_file.write(\"0x\" + str(hex(int(address, 16)))[2:].zfill(8) + \" : \" + json_file[str(instruction)]['meaning'] + ' : ' + GetDictField_32(json_file, line, instruction) + \"\\n\")\r\n        case \"Classic\":\r\n            descr_file.write(\"0x\" + str(hex(int(address, 16)))[2:].zfill(8) + \" : \" + json_file[str(instruction)]['meaning'] + ' : ' + GetDictField_32(json_file, line, instruction) + \"\\n\")\r\n        case \"Integral\":\r\n            descr_file.write(\"0x\" + str(hex(int(address, 16)))[2:].zfill(8) + \" : \" + line[:-1] + ' : ' +json_file[str(instruction)]['meaning'] + \" : \" + GetDictField_32(json_file, line, instruction) + \"\\n\")\r\n\r\n\r\n# Fonction qui lit les bits et lance l'écriture des instructions.\r\n# Elle contient aussi l'arbre de décision\r\ndef describe_instructions(code):\r\n    global TotalInstructions\r\n    global CurrentInstruction\r\n    file = open(resource_path(\"ConversionFiles\\\\instructions_file.txt\"), \"r\")\r\n    assembly_description = open(resource_path(\"ConversionFiles\\\\Assembly.txt\"), \"w\")\r\n    lines = file.readlines()\r\n    TotalInstructions = len(lines)\r\n    json_16 = json.load(open(resource_path(\"ConversionFiles\\\\Json_Decoding_ARM_16bit.json\"), \"r\"))\r\n    json_32 = json.load(open(resource_path(\"ConversionFiles\\\\Json_Decoding_ARM_32bit.json\"), \"r\"))\r\n    for binary_line in lines:\r\n        address = binary_line[:8]\r\n        line = binary_line[8:-1]\r\n        CurrentInstruction += 1\r\n        if is32bits(line):\r\n            if line == \"11111111111111111111111111111111\":\r\n                assembly_description.write(\"0x\" + str(hex(int(address, 16)))[2:].zfill(8) + \" : UNDEFINED\\n\")\r\n            else:\r\n                # Load/Store\r\n                if line[:7] == \"1110100\":\r\n                    # Load/Store Multiple\r\n                    if line[7:9] == \"01\" and line[11] == \"0\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"1110100010x0\", code, address)\r\n                    elif line[7:9] == \"01\" and line[11] == \"1\" and line[10] != \"0\" and line[12:16] != \"1101\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"1110100010x1\", code, address)\r\n                    elif line[7:9] == \"01\" and line[11] == \"1\" and line[10] == \"0\" and line[12:16] == \"1101\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"1110100010111101\", code, address)\r\n                    elif line[7:9] == \"10\" and line[11] == \"0\" and line[10] != \"0\" and line[12:16] != \"1101\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"1110100100x0\", code, address)\r\n                    elif line[7:9] == \"10\" and line[11] == \"0\" and line[10] == \"0\" and line[12:16] == \"1101\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"1110100100101101\", code, address)\r\n                    elif line[7:9] == \"10\" and line[11] == \"1\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"1110100100x1\", code, address)\r\n                    # Load/Store dual or exclusive, table branch\r\n                    elif line[7:9] == \"00\" and line[10:12] == \"00\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111010000100\", code, address)\r\n                    elif line[7:9] == \"00\" and line[10:12] == \"01\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111010000101\", code, address)\r\n                    elif (line[7] == \"0\" and line[10:12] == \"10\") or (line[7] == \"1\" and line[11] == \"0\"):\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111010000110\", code, address)\r\n                    elif (line[7] == \"0\" and line[10:12] == \"11\" and line[12:16] != \"1111\") or (line[7] == \"1\" and line[11] == \"1\" and line[12:16] != \"1111\"):\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111010000111\", code, address)\r\n                    elif (line[7] == \"0\" and line[10:12] == \"11\" and line[12:16] == \"1111\") or (line[7] == \"1\" and line[11] == \"1\" and line[12:16] == \"1111\"):\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"1110100xx1x11111\", code, address)\r\n                    elif line[7:9] == \"01\":\r\n                        if line[10:12] == \"00\" and line[24:28] == \"0100\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111010001100xxxxxxxx11110100\", code, address)\r\n                        elif line[10:12] == \"00\" and line[24:28] == \"0101\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111010001100xxxxxxxx11110101\", code, address)\r\n                        elif line[10:12] == \"01\":\r\n                            match line[24:28]:\r\n                                case \"0000\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111010001101xxxx111100000000\", code, address)\r\n                                case \"0001\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111010001101xxxx111100000001\", code, address)\r\n                                case \"0100\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111010001101xxxxxxxx111101001111\", code, address)\r\n                                case \"0101\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111010001101xxxxxxxx111101011111\", code, address)\r\n                                case _:\r\n                                    assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                        else:\r\n                            assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                    else:\r\n                        assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # Data processing (shifted register)\r\n                elif line[:7] == \"1110101\":\r\n                    match line[7:11]:\r\n                        case \"0000\":\r\n                            if line[20:24] != \"1111\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11101010000\", code, address)\r\n                            elif line[20:24] == \"1111\" and line[11] == \"1\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111010100001xxxxxxxx1111\", code, address)\r\n                            else:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                        case \"0001\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11101010001\", code, address)\r\n                        case \"0010\":\r\n                            if line[12:16] != \"1111\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11101010010\", code, address)\r\n                            else:\r\n                                if line[26:28] == \"00\" and line[17:20] == \"000\" and line[24:26] == \"00\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11101010010x1111x000xxxx0000\", code, address)\r\n                                elif line[26:28] == \"00\" and line[17:20] != \"000\" and line[24:26] != \"00\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11101010010x1111xxxxxxxxxx00\", code, address)\r\n                                elif line[26:28] == \"01\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11101010010x1111xxxxxxxxxx01\", code, address)\r\n                                elif line[26:28] == \"10\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11101010010x1111xxxxxxxxxx10\", code, address)\r\n                                elif line[26:28] == \"11\":\r\n                                    if line[17:20] == \"000\" and line[24:26] == \"00\":\r\n                                        write_described_instruction_32(assembly_description, json_32, line, \"11101010010x1111x000xxxx0011\", code, address)\r\n                                    else:\r\n                                        write_described_instruction_32(assembly_description, json_32, line, \"11101010010x1111xxxxxxxxxx11\", code, address)\r\n                                else:\r\n                                    assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                        case \"0011\":\r\n                            if line[12:16] != \"1111\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11101010011\", code, address)\r\n                            else:\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11101010011x1111\", code, address)\r\n                        case \"0100\":\r\n                            if line[20:24] != \"1111\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11101010100\", code, address)\r\n                            elif line[20:24] == \"1111\" and line[11] == \"1\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111010101001xxxxxxxx1111\", code, address)\r\n                            else:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                        case \"0110\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11101010110\", code, address)\r\n                        case \"1000\":\r\n                            if line[20:24] != \"1111\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11101011000\", code, address)\r\n                            elif line[20:24] == \"1111\" and line[11] == \"1\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111010110001xxxxxxxx1111\", code, address)\r\n                            else:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                        case \"1010\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11101011010\", code, address)\r\n                        case \"1011\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11101011011\", code, address)\r\n                        case \"1101\":\r\n                            if line[20:24] != \"1111\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11101011101\", code, address)\r\n                            elif line[20:24] == \"1111\" and line[11] == \"1\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111010111011xxxxxxxx1111\", code, address)\r\n                            else:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                        case \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11101011110\", code, address)\r\n                        case _:\r\n                            assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # Data processing (modified immediate)\r\n                elif line[:5] == \"11110\" and line[16] == \"0\":\r\n                    if line[6] == \"0\":\r\n                        match line[7:11]:\r\n                            case \"0000\":\r\n                                if line[20:24] != \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x00000\", code, address)\r\n                                else:\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x00000xxxxxxxxx1111\", code, address)\r\n                            case \"0001\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11110x00001\", code, address)\r\n                            case \"0010\":\r\n                                if line[12:16] != \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x00010\", code, address)\r\n                                else:\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x00010x1111\", code, address)\r\n                            case \"0011\":\r\n                                if line[12:16] != \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x00011\", code, address)\r\n                                else:\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x00011x1111\", code, address)\r\n                            case \"0100\":\r\n                                if line[20:24] != \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x00100\", code, address)\r\n                                else:\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x00100xxxxxxxxx1111\", code, address)\r\n                            case \"1000\":\r\n                                if line[20:24] != \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x01000\", code, address)\r\n                                else:\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x01000xxxxxxxxx1111\", code, address)\r\n                            case \"1010\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11110x01010\", code, address)\r\n                            case \"1011\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11110x01011\", code, address)\r\n                            case \"1101\":\r\n                                if line[20:24] != \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x01101\", code, address)\r\n                                else:\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x01101xxxxxxxxx1111\", code, address)\r\n                            case \"1110\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11110x01110\", code, address)\r\n                            case _:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                    # Data processing (plain binary immediate)\r\n                    else:\r\n                        match line[7:12]:\r\n                            case \"00000\":\r\n                                if line[12:16] != \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x10000011110\", code, address)\r\n                                else:\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x100000xxxx0\", code, address)\r\n                            case \"00100\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11110x100100xxxx0\", code, address)\r\n                            case \"01010\":\r\n                                if line[12:16] != \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x101010xxxx0\", code, address)\r\n                                else:\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110x1010101111\", code, address)\r\n                            case \"01100\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11110x101100xxxx0\", code, address)\r\n                            case \"10000\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"1111001100x0xxxx0xxxxxxxxx0\", code, address)\r\n                            case \"10010\":\r\n                                if line[17:20] != \"000\" and line[24:26] != \"00\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"1111001100x0xxxx0xxxxxxxxx0\", code, address)\r\n                                else:\r\n                                    assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                            case \"10100\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111100110100xxxx0xxxxxxxxx0\", code, address)\r\n                            case \"10110\":\r\n                                if line[12:16] != \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111100110110xxxx0xxxxxxxxx0\", code, address)\r\n                                else:\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"11110011011011110xxxxxxxxx0\", code, address)\r\n                            case \"11000\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"1111001110x0xxxx0xxxxxxxxx0\", code, address)\r\n                            case \"11010\":\r\n                                if line[17:20] != \"000\" and line[24:26] != \"00\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"1111001110x0xxxx0xxxxxxxxx0\", code, address)\r\n                                else:\r\n                                    assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                            case \"11100\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111100111100xxxx0xxxxxxxxx0\", code, address)\r\n                            case _:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # Branches and miscellaneous control\r\n                elif line[:5] == \"11110\" and line[16] == \"1\":\r\n                    if line[17:20] in [\"000\", \"010\"]:\r\n                        if line[6:10] != \"111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11110xxxxxxxxxxx10x0\", code, address)\r\n                        elif line[5:12] == \"011100\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11110011100\", code, address)\r\n                        elif line[5:12] == \"011111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11110011111\", code, address)\r\n                        elif line[5:12] == \"0111010\":\r\n                            if line[21:24] == \"000\":\r\n                                if line[24:28] == \"1111\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111100111010xxxx10x1x0001111\", code, address)\r\n                                match line[24:]:\r\n                                    case \"00000000\":\r\n                                        write_described_instruction_32(assembly_description, json_32, line, \"111100111010xxxx10x0x00000000000\", code, address)\r\n                                    case \"00000001\":\r\n                                        write_described_instruction_32(assembly_description, json_32, line, \"111100111010xxxx10x0x00000000001\", code, address)\r\n                                    case \"00000010\":\r\n                                        write_described_instruction_32(assembly_description, json_32, line, \"111100111010xxxx10x0x00000000010\", code, address)\r\n                                    case \"00000011\":\r\n                                        write_described_instruction_32(assembly_description, json_32, line, \"111100111010xxxx10x0x00000000011\", code, address)\r\n                                    case \"00000100\":\r\n                                        write_described_instruction_32(assembly_description, json_32, line, \"111100111010xxxx10x0x00000000100\", code, address)\r\n                                    case _:\r\n                                        assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                            else:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                        elif line[5:12] == \"0111011\":\r\n                            match line[24:28]:\r\n                                case \"0010\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111100111011xxxx10x0xxxx0010\", code, address)\r\n                                case \"0100\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111100111011xxxx10x0xxxx0100\", code, address)\r\n                                case \"0101\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111100111011xxxx10x0xxxx0101\", code, address)\r\n                                case \"0110\":\r\n                                    write_described_instruction_32(assembly_description, json_32, line, \"111100111011xxxx10x0xxxx0110\", code, address)\r\n                                case _:\r\n                                    assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                        else:\r\n                            assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                    elif line[17:20] in [\"001\", \"011\"]:\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11110xxxxxxxxxxx10x1\", code, address)\r\n                    elif line[17:20] in [\"101\", \"111\"]:\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11110xxxxxxxxxxx11x1\", code, address)\r\n                    else:\r\n                        assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # Store single data item\r\n                elif line[:8] == \"11111000\" and line[11] == \"0\":\r\n                    if line[8:12] == \"100\" or (line[8:12] == \"000\" and line[20] == \"1\"):\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000100\", code, address)\r\n                    elif line[8:12] == \"000\" and line[20] == \"0\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000000\", code, address)\r\n                    elif line[8:12] == \"101\" or (line[8:12] == \"001\" and line[20] == \"1\"):\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000101\", code, address)\r\n                    elif line[8:12] == \"001\" and line[20] == \"0\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000001\", code, address)\r\n                    elif line[8:12] == \"110\" or (line[8:12] == \"010\" and line[20] == \"1\"):\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000110\", code, address)\r\n                    else:\r\n                        assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # STR et LDR\r\n                elif line[:7] == \"1111100\":\r\n                    # Load Byte\r\n                    if line[9:12] == \"001\":\r\n                        if line[7] == \"0\" and line[12:16] == \"1111\" and line[16:20] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11111000x0011111\", code, address)\r\n                        elif (line[7:9] == \"01\" and line[12:16] != \"1111\" and line[16:20] != \"1111\") or (line[7:9] == \"00\" and line[20] == \"1\" and line[23] == \"1\" and line[12:16] != \"1111\") or (line[7:9] == \"00\" and line[20:24] == \"1100\" and line[12:16] != \"1111\" and line[16:20] != \"1111\"):\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110000001\", code, address)\r\n                        elif line[7:9] == \"00\" and line[20:26] == \"000000\" and line[12:16] != \"1111\" and line[16:20] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110000001xxxxxxxx000000\", code, address)\r\n                        elif line[7] == \"1\" and line[12:16] == \"1111\" and line[16:20] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11111001x0011111\", code, address)\r\n                        elif (line[7:9] == \"11\" and line[12:16] != \"1111\" and line[16:20] != \"1111\") or (line[7:9] == \"10\" and line[20] == \"1\" and line[23] == \"1\" and line[12:16] != \"1111\") or (line[7:9] == \"10\" and line[20:24] == \"1100\" and line[12:16] != \"1111\" and line[16:20] != \"1111\"):\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110011001\", code, address)\r\n                        elif line[7:9] == \"10\" and line[20:26] == \"000000\" and line[12:16] != \"1111\" and line[16:20] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110010001\", code, address)\r\n                        else:\r\n                            assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                    # Load halfword\r\n                    elif line[9:12] == \"011\":\r\n                        if line[7] == \"0\" and line[12:16] == \"1111\" and line[16:20] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11111000x0111111\", code, address)\r\n                        elif (line[7:9] == \"01\" and line[12:16] != \"1111\" and line[16:20] != \"1111\") or (line[7:9] == \"00\" and line[20] == \"1\" and line[23] == \"1\" and line[12:16] != \"1111\" and line[16:20] != \"1111\") or (line[7:9] == \"00\" and line[20:24] == \"1100\" and line[12:16] != \"1111\" and line[16:20] != \"1111\"):\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110001011xxxxxxxx000000\", code, address)\r\n                        elif line[7:9] == \"00\" and line[20:26] == \"000000\" and line[12:16] != \"1111\" and line[16:20] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110000011\", code, address)\r\n                        elif (line[7:9] == \"11\" and line[12:16] != \"1111\" and line[16:20] != \"1111\") or (line[7:9] == \"10\" and line[20] == \"1\" and line[23] == \"1\" and line[12:16] != \"1111\" and line[16:20] != \"1111\") or (line[7:9] == \"10\" and line[20:24] == \"1100\" and line[12:16] != \"1111\" and line[16:20] != \"1111\"):\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110011011\", code, address)\r\n                        elif line[7] == \"0\" and line[12:16] == \"1111\" and line[16:20] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11111000x011\", code, address)\r\n                        elif line[7:9] == \"10\" and line[20:26] == \"000000\" and line[12:16] != \"1111\" and line[16:20] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110010011\", code, address)\r\n                        else:\r\n                            assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                    # Load word\r\n                    elif line[9:12] == \"101\":\r\n                        if line[7] == \"0\" and line[12:16] == \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"11111000x1011111\", code, address)\r\n                        elif ((line[7:9] == \"01\") or (line[7:9] == \"00\" and line[20] == \"1\" and line[23] == \"1\") or (line[7:9] == \"11\" and line[20:24] == \"1100\")) and line[12:16] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110001101\", code, address)\r\n                        elif line[7:9] == \"01\" and line[20:26] == \"000000\" and line[12:16] != \"1111\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111110001101xxxxxxxx000000\", code, address)\r\n                        else:\r\n                            assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                    else:\r\n                        assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # Store single data item\r\n                elif line[:8] == \"11111000\":\r\n                    if (line[8:11] == \"100\") or (line[8:11] == \"000\" and line[20] == \"1\"):\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000100\", code, address)\r\n                    elif line[8:11] == \"000\" and line[20] == \"0\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000000\", code, address)\r\n                    elif (line[8:11] == \"101\") or (line[8:11] == \"001\" and line[20] == \"1\"):\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000101\", code, address)\r\n                    elif line[8:11] == \"001\" and line[20] == \"0\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000001\", code, address)\r\n                    elif (line[8:11] == \"110\") or (line[8:11] == \"010\" and line[20] == \"1\"):\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000110\", code, address)\r\n                    elif line[8:11] == \"010\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"11111000010\", code, address)\r\n                # Data processing (register)\r\n                elif line[:8] == \"11111010\" and line[16:20] == \"1111\":\r\n                    if line[24:28] == \"0000\":\r\n                        match line[8:11]:\r\n                            case \"000\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11111010000\", code, address)\r\n                            case \"001\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11111010001\", code, address)\r\n                            case \"010\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11111010010\", code, address)\r\n                            case \"011\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11111010011\", code, address)\r\n                            case _:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                    elif line[12:16] == \"1111\" and line[24] == \"1\":\r\n                        match line[8:12]:\r\n                            case \"0000\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11111010000011111111xxxx1\", code, address)\r\n                            case \"0001\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11111010000111111111xxxx1\", code, address)\r\n                            case \"0100\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11111010010011111111xxxx1\", code, address)\r\n                            case \"0101\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"11111010010111111111xxxx1\", code, address)\r\n                            case _:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                    else:\r\n                        assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # Miscellaneous operations\r\n                elif line[:10] == \"1111101010\":\r\n                    if line[10:12] == \"01\":\r\n                        match line[26:28]:\r\n                            case \"00\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111110101001xxxx1111xxxx1000\", code, address)\r\n                            case \"01\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111110101001xxxx1111xxxx1001\", code, address)\r\n                            case \"10\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111110101001xxxx1111xxxx1010\", code, address)\r\n                            case \"11\":\r\n                                write_described_instruction_32(assembly_description, json_32, line, \"111110101001xxxx1111xxxx1011\", code, address)\r\n                            case _:\r\n                                assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                    else:\r\n                        assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # Multiply, multiply accumulate, and absolute difference\r\n                elif line[:9] == \"111110110\":\r\n                    if line[9:12] == \"000\" and line[26:28] == \"00\" and line[16:20] == \"1111\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111110110000xxxx1111xxxx0000\", code, address)\r\n                    elif line[9:12] == \"000\" and line[26:28] == \"00\" and line[16:20] != \"1111\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111110110000xxxxxxxxxxxx0000\", code, address)\r\n                    elif line[9:12] == \"000\" and line[26:28] == \"01\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111110110000xxxxxxxxxxxx0001\", code, address)\r\n                    else:\r\n                        assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # Long multiply, long multiply accumulate, and divide\r\n                elif line[:9] == \"111110111\":\r\n                    if line[9:12] == \"000\" and line[24:28] == \"0000\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111110111000xxxxxxxxxxxx0000\", code, address)\r\n                    elif line[9:12] == \"001\" and line[24:28] == \"1111\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111110111001xxxxxxxxxxxx1111\", code, address)\r\n                    elif line[9:12] == \"010\" and line[24:28] == \"0000\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111110111010xxxxxxxxxxxx0000\", code, address)\r\n                    elif line[9:12] == \"011\" and line[24:28] == \"1111\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111110111011xxxxxxxxxxxx1111\", code, address)\r\n                    elif line[9:12] == \"100\" and line[24:28] == \"0000\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111110111100xxxxxxxxxxxx0000\", code, address)\r\n                    elif line[9:12] == \"110\" and line[24:28] == \"0000\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111110111110xxxxxxxxxxxx0000\", code, address)\r\n                    else:\r\n                        assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n                # Coprocessor instructions\r\n                elif line[:3] == \"111\" and line[4:6] == \"11\":\r\n                    if line[6] == \"0\" and line[11] == \"0\" and line[6:9] != \"000\" and line[11] != \"0\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111x110xxxx0\", code, address)\r\n                    elif line[6] == \"0\" and line[11] == \"1\" and line[6:9] != \"000\" and line[11] != \"0\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111x110xxxx0\", code, address)\r\n                    elif line[6:12] == \"000100\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111x11000100\", code, address)\r\n                    elif line[6:12] == \"000101\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111x11000101\", code, address)\r\n                    elif line[6:8] == \"10\" and line[27] == \"0\":\r\n                        write_described_instruction_32(assembly_description, json_32, line, \"111x1110xxxxxxxxxxxxxxxxxxx0\", code, address)\r\n                    elif line[6:8] == \"10\" and line[27] == \"1\":\r\n                        if line[11] == \"0\":\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111x1110xxx0xxxxxxxxxxxxxxx1\", code, address)\r\n                        else:\r\n                            write_described_instruction_32(assembly_description, json_32, line, \"111x1110xxx1xxxxxxxxxxxxxxx1\", code, address)\r\n                else:\r\n                    assembly_description.write(\"0x\" + address + \" : \" + line + \"UNDEFINED or UNPREDICTABLE\\n\")\r\n        else:  # 16-bits\r\n            # Shift (immediate), add, subtract, move, and compare\r\n            if line[:2] == \"00\":\r\n                if line[2:5] in [\"000\", \"001\", \"010\", \"001\", \"100\", \"101\", \"110\", \"111\"]:\r\n                    write_described_instruction_16(assembly_description, json_16, line, 5, code, address)\r\n                elif line[2:7] in [\"01100\", \"01101\", \"01110\", \"01111\"]:\r\n                    write_described_instruction_16(assembly_description, json_16, line, 7, code, address)\r\n                else:\r\n                    assembly_description.write(\"0x\" + address + \" : \" + line + \" : UNDEFINED\\n\")\r\n            # Data processing\r\n            elif line[:6] == \"010000\":\r\n                write_described_instruction_16(assembly_description, json_16, line, 10, code, address)\r\n            # Special data instructions and branch and exchange\r\n            elif line[:6] == \"010001\":\r\n                if line[6:8] in [\"00\", \"10\"]:\r\n                    write_described_instruction_16(assembly_description, json_16, line, 8, code, address)\r\n                elif line[6:9] in [\"011\", \"110\", \"111\"]:\r\n                    write_described_instruction_16(assembly_description, json_16, line, 9, code, address)\r\n                elif line[6:10] == \"0101\":\r\n                    write_described_instruction_16(assembly_description, json_16, line, 10, code, address)\r\n                else:\r\n                    assembly_description.write(\"0x\" + address + \" : \" + line + \" : UNDEFINED\\n\")\r\n            # Load / store single data item\r\n            elif line[:4] == \"0101\":\r\n                write_described_instruction_16(assembly_description, json_16, line, 7, code, address)\r\n            # Load / store single data item\r\n            elif line[:4] in [\"0110\", \"0111\", \"1000\", \"1001\"]:\r\n                write_described_instruction_16(assembly_description, json_16, line, 5, code, address)\r\n            # Miscellaneous 16-bit instructions\r\n            elif line[:4] == \"1011\":\r\n                if line[4:11] == \"0110011\":\r\n                    write_described_instruction_16(assembly_description, json_16, line, 11, code, address)\r\n                elif line[4:10] in [\"001000\", \"001001\", \"001010\", \"001011\", \"101000\", \"101001\", \"101011\"]:\r\n                    write_described_instruction_16(assembly_description, json_16, line, 10, code, address)\r\n                elif line[4:9] in [\"00000\", \"00001\"]:\r\n                    write_described_instruction_16(assembly_description, json_16, line, 9, code, address)\r\n                elif line[4:8] in [\"0001\", \"0011\", \"1001\", \"1011\", \"1110\"]:\r\n                    write_described_instruction_16(assembly_description, json_16, line, 8, code, address)\r\n                elif line[4:7] in [\"010\", \"110\"]:\r\n                    write_described_instruction_16(assembly_description, json_16, line, 7, code, address)\r\n                elif line[4:8] == \"1111\":\r\n                    if line[12:16] == \"0000\":\r\n                        if line[8:12] in [\"0000\", \"0001\", \"0010\", \"0011\", \"0100\"]:\r\n                            write_described_instruction_16(assembly_description, json_16, line, 16, code, address)\r\n                        else:\r\n                            assembly_description.write(\"0x\" + address + \" : \" + line + \" : UNDEFINED\\n\")\r\n                    else:\r\n                        write_described_instruction_16(assembly_description, json_16, line, 8, code, address)\r\n                elif line[:4] == \"1100\":\r\n                    if line[4:8] == \"1111\":\r\n                        write_described_instruction_16(assembly_description, json_16, line, 8, code, address)\r\n                    elif line[4:7] not in [\"1110\", \"1110\"]:\r\n                        write_described_instruction_16(assembly_description, json_16, line, 7, code, address)\r\n                    else:\r\n                        assembly_description.write(\"0x\" + address + \" : \" + line + \" : UNDEFINED\\n\")\r\n                else:\r\n                    assembly_description.write(\"0x\" + address + \" : \" + line + \" : UNDEFINED\\n\")\r\n            elif line[:4] == \"1101\":\r\n                if line[4:8] == \"1111\":\r\n                    write_described_instruction_16(assembly_description, json_16, line, 8, code, address)\r\n                elif line[4:7] != \"111\":\r\n                    write_described_instruction_16(assembly_description, json_16, line, 4, code, address)\r\n                else:\r\n                    assembly_description.write(\"0x\" + address + \" : \" + line + \" : UNDEFINED\\n\")\r\n            # Unconditional branch, Generate PC-relative address, Generate SP-relative address, Store multiple registers, Load multiple registers, LDR (literal)\r\n            elif line[:5] in [\"11100\", \"10100\", \"10101\", \"11000\", \"11001\", \"01001\"]:\r\n                write_described_instruction_16(assembly_description, json_16, line, 5, code, address)\r\n            else:\r\n                assembly_description.write(\"0x\" + address + \" : \" + line + \" : UNDEFINED\\n\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/conversionHexToAssembly.py b/conversionHexToAssembly.py
--- a/conversionHexToAssembly.py	(revision 1adb7a0d694e0c2dcfd12c6833def81b5217dd1f)
+++ b/conversionHexToAssembly.py	(date 1678289552112)
@@ -325,11 +325,11 @@
                                 case "0101":
                                     write_described_instruction_32(assembly_description, json_32, line, "111010001101xxxxxxxx111101011111", code, address)
                                 case _:
-                                    assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                    assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                         else:
-                            assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                            assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                     else:
-                        assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                        assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # Data processing (shifted register)
                 elif line[:7] == "1110101":
                     match line[7:11]:
@@ -339,7 +339,7 @@
                             elif line[20:24] == "1111" and line[11] == "1":
                                 write_described_instruction_32(assembly_description, json_32, line, "111010100001xxxxxxxx1111", code, address)
                             else:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                         case "0001":
                             write_described_instruction_32(assembly_description, json_32, line, "11101010001", code, address)
                         case "0010":
@@ -360,7 +360,7 @@
                                     else:
                                         write_described_instruction_32(assembly_description, json_32, line, "11101010010x1111xxxxxxxxxx11", code, address)
                                 else:
-                                    assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                    assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                         case "0011":
                             if line[12:16] != "1111":
                                 write_described_instruction_32(assembly_description, json_32, line, "11101010011", code, address)
@@ -372,7 +372,7 @@
                             elif line[20:24] == "1111" and line[11] == "1":
                                 write_described_instruction_32(assembly_description, json_32, line, "111010101001xxxxxxxx1111", code, address)
                             else:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                         case "0110":
                             write_described_instruction_32(assembly_description, json_32, line, "11101010110", code, address)
                         case "1000":
@@ -381,7 +381,7 @@
                             elif line[20:24] == "1111" and line[11] == "1":
                                 write_described_instruction_32(assembly_description, json_32, line, "111010110001xxxxxxxx1111", code, address)
                             else:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                         case "1010":
                             write_described_instruction_32(assembly_description, json_32, line, "11101011010", code, address)
                         case "1011":
@@ -392,11 +392,11 @@
                             elif line[20:24] == "1111" and line[11] == "1":
                                 write_described_instruction_32(assembly_description, json_32, line, "111010111011xxxxxxxx1111", code, address)
                             else:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                         case "1111":
                             write_described_instruction_32(assembly_description, json_32, line, "11101011110", code, address)
                         case _:
-                            assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                            assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # Data processing (modified immediate)
                 elif line[:5] == "11110" and line[16] == "0":
                     if line[6] == "0":
@@ -440,7 +440,7 @@
                             case "1110":
                                 write_described_instruction_32(assembly_description, json_32, line, "11110x01110", code, address)
                             case _:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                     # Data processing (plain binary immediate)
                     else:
                         match line[7:12]:
@@ -464,7 +464,7 @@
                                 if line[17:20] != "000" and line[24:26] != "00":
                                     write_described_instruction_32(assembly_description, json_32, line, "1111001100x0xxxx0xxxxxxxxx0", code, address)
                                 else:
-                                    assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                    assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                             case "10100":
                                 write_described_instruction_32(assembly_description, json_32, line, "111100110100xxxx0xxxxxxxxx0", code, address)
                             case "10110":
@@ -478,11 +478,11 @@
                                 if line[17:20] != "000" and line[24:26] != "00":
                                     write_described_instruction_32(assembly_description, json_32, line, "1111001110x0xxxx0xxxxxxxxx0", code, address)
                                 else:
-                                    assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                    assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                             case "11100":
                                 write_described_instruction_32(assembly_description, json_32, line, "111100111100xxxx0xxxxxxxxx0", code, address)
                             case _:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # Branches and miscellaneous control
                 elif line[:5] == "11110" and line[16] == "1":
                     if line[17:20] in ["000", "010"]:
@@ -508,9 +508,9 @@
                                     case "00000100":
                                         write_described_instruction_32(assembly_description, json_32, line, "111100111010xxxx10x0x00000000100", code, address)
                                     case _:
-                                        assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                        assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                             else:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                         elif line[5:12] == "0111011":
                             match line[24:28]:
                                 case "0010":
@@ -522,15 +522,15 @@
                                 case "0110":
                                     write_described_instruction_32(assembly_description, json_32, line, "111100111011xxxx10x0xxxx0110", code, address)
                                 case _:
-                                    assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                    assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                         else:
-                            assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                            assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                     elif line[17:20] in ["001", "011"]:
                         write_described_instruction_32(assembly_description, json_32, line, "11110xxxxxxxxxxx10x1", code, address)
                     elif line[17:20] in ["101", "111"]:
                         write_described_instruction_32(assembly_description, json_32, line, "11110xxxxxxxxxxx11x1", code, address)
                     else:
-                        assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                        assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # Store single data item
                 elif line[:8] == "11111000" and line[11] == "0":
                     if line[8:12] == "100" or (line[8:12] == "000" and line[20] == "1"):
@@ -544,7 +544,7 @@
                     elif line[8:12] == "110" or (line[8:12] == "010" and line[20] == "1"):
                         write_described_instruction_32(assembly_description, json_32, line, "11111000110", code, address)
                     else:
-                        assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                        assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # STR et LDR
                 elif line[:7] == "1111100":
                     # Load Byte
@@ -562,7 +562,7 @@
                         elif line[7:9] == "10" and line[20:26] == "000000" and line[12:16] != "1111" and line[16:20] != "1111":
                             write_described_instruction_32(assembly_description, json_32, line, "111110010001", code, address)
                         else:
-                            assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                            assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                     # Load halfword
                     elif line[9:12] == "011":
                         if line[7] == "0" and line[12:16] == "1111" and line[16:20] != "1111":
@@ -578,7 +578,7 @@
                         elif line[7:9] == "10" and line[20:26] == "000000" and line[12:16] != "1111" and line[16:20] != "1111":
                             write_described_instruction_32(assembly_description, json_32, line, "111110010011", code, address)
                         else:
-                            assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                            assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                     # Load word
                     elif line[9:12] == "101":
                         if line[7] == "0" and line[12:16] == "1111":
@@ -588,9 +588,9 @@
                         elif line[7:9] == "01" and line[20:26] == "000000" and line[12:16] != "1111":
                             write_described_instruction_32(assembly_description, json_32, line, "111110001101xxxxxxxx000000", code, address)
                         else:
-                            assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                            assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                     else:
-                        assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                        assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # Store single data item
                 elif line[:8] == "11111000":
                     if (line[8:11] == "100") or (line[8:11] == "000" and line[20] == "1"):
@@ -618,7 +618,7 @@
                             case "011":
                                 write_described_instruction_32(assembly_description, json_32, line, "11111010011", code, address)
                             case _:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                     elif line[12:16] == "1111" and line[24] == "1":
                         match line[8:12]:
                             case "0000":
@@ -630,9 +630,9 @@
                             case "0101":
                                 write_described_instruction_32(assembly_description, json_32, line, "11111010010111111111xxxx1", code, address)
                             case _:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                     else:
-                        assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                        assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # Miscellaneous operations
                 elif line[:10] == "1111101010":
                     if line[10:12] == "01":
@@ -646,9 +646,9 @@
                             case "11":
                                 write_described_instruction_32(assembly_description, json_32, line, "111110101001xxxx1111xxxx1011", code, address)
                             case _:
-                                assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                                assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                     else:
-                        assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                        assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # Multiply, multiply accumulate, and absolute difference
                 elif line[:9] == "111110110":
                     if line[9:12] == "000" and line[26:28] == "00" and line[16:20] == "1111":
@@ -658,7 +658,7 @@
                     elif line[9:12] == "000" and line[26:28] == "01":
                         write_described_instruction_32(assembly_description, json_32, line, "111110110000xxxxxxxxxxxx0001", code, address)
                     else:
-                        assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                        assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # Long multiply, long multiply accumulate, and divide
                 elif line[:9] == "111110111":
                     if line[9:12] == "000" and line[24:28] == "0000":
@@ -674,7 +674,7 @@
                     elif line[9:12] == "110" and line[24:28] == "0000":
                         write_described_instruction_32(assembly_description, json_32, line, "111110111110xxxxxxxxxxxx0000", code, address)
                     else:
-                        assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                        assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
                 # Coprocessor instructions
                 elif line[:3] == "111" and line[4:6] == "11":
                     if line[6] == "0" and line[11] == "0" and line[6:9] != "000" and line[11] != "0":
@@ -693,7 +693,7 @@
                         else:
                             write_described_instruction_32(assembly_description, json_32, line, "111x1110xxx1xxxxxxxxxxxxxxx1", code, address)
                 else:
-                    assembly_description.write("0x" + address + " : " + line + "UNDEFINED or UNPREDICTABLE\n")
+                    assembly_description.write("0x" + address + " : " + line + " : UNDEFINED or UNPREDICTABLE\n")
         else:  # 16-bits
             # Shift (immediate), add, subtract, move, and compare
             if line[:2] == "00":
